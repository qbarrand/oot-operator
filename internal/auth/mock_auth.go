// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authn "github.com/google/go-containerregistry/pkg/authn"
)

// MockRegistryAuth is a mock of RegistryAuth interface.
type MockRegistryAuth struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryAuthMockRecorder
}

// MockRegistryAuthMockRecorder is the mock recorder for MockRegistryAuth.
type MockRegistryAuthMockRecorder struct {
	mock *MockRegistryAuth
}

// NewMockRegistryAuth creates a new mock instance.
func NewMockRegistryAuth(ctrl *gomock.Controller) *MockRegistryAuth {
	mock := &MockRegistryAuth{ctrl: ctrl}
	mock.recorder = &MockRegistryAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryAuth) EXPECT() *MockRegistryAuthMockRecorder {
	return m.recorder
}

// GetKeyChainFromSecret mocks base method.
func (m *MockRegistryAuth) GetKeyChainFromSecret(ctx context.Context, secretName, secretNamespace string) (authn.Keychain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyChainFromSecret", ctx, secretName, secretNamespace)
	ret0, _ := ret[0].(authn.Keychain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyChainFromSecret indicates an expected call of GetKeyChainFromSecret.
func (mr *MockRegistryAuthMockRecorder) GetKeyChainFromSecret(ctx, secretName, secretNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyChainFromSecret", reflect.TypeOf((*MockRegistryAuth)(nil).GetKeyChainFromSecret), ctx, secretName, secretNamespace)
}
