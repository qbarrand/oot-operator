// Code generated by MockGen. DO NOT EDIT.
// Source: conditions.go

// Package module is a generated GoMock package.
package module

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/qbarrand/oot-operator/api/v1alpha1"
)

// MockConditionsUpdater is a mock of ConditionsUpdater interface.
type MockConditionsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockConditionsUpdaterMockRecorder
}

// MockConditionsUpdaterMockRecorder is the mock recorder for MockConditionsUpdater.
type MockConditionsUpdaterMockRecorder struct {
	mock *MockConditionsUpdater
}

// NewMockConditionsUpdater creates a new mock instance.
func NewMockConditionsUpdater(ctrl *gomock.Controller) *MockConditionsUpdater {
	mock := &MockConditionsUpdater{ctrl: ctrl}
	mock.recorder = &MockConditionsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionsUpdater) EXPECT() *MockConditionsUpdaterMockRecorder {
	return m.recorder
}

// SetAsErrored mocks base method.
func (m *MockConditionsUpdater) SetAsErrored(ctx context.Context, mod *v1alpha1.Module, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsErrored", ctx, mod, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsErrored indicates an expected call of SetAsErrored.
func (mr *MockConditionsUpdaterMockRecorder) SetAsErrored(ctx, mod, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsErrored", reflect.TypeOf((*MockConditionsUpdater)(nil).SetAsErrored), ctx, mod, reason, message)
}

// SetAsProgressing mocks base method.
func (m *MockConditionsUpdater) SetAsProgressing(ctx context.Context, mod *v1alpha1.Module, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsProgressing", ctx, mod, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsProgressing indicates an expected call of SetAsProgressing.
func (mr *MockConditionsUpdaterMockRecorder) SetAsProgressing(ctx, mod, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsProgressing", reflect.TypeOf((*MockConditionsUpdater)(nil).SetAsProgressing), ctx, mod, reason, message)
}

// SetAsReady mocks base method.
func (m *MockConditionsUpdater) SetAsReady(ctx context.Context, mod *v1alpha1.Module, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsReady", ctx, mod, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsReady indicates an expected call of SetAsReady.
func (mr *MockConditionsUpdaterMockRecorder) SetAsReady(ctx, mod, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsReady", reflect.TypeOf((*MockConditionsUpdater)(nil).SetAsReady), ctx, mod, reason, message)
}
