// Code generated by MockGen. DO NOT EDIT.
// Source: daemonset.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/qbarrand/oot-operator/api/v1alpha1"
	v1 "k8s.io/api/apps/v1"
)

// MockDaemonSetCreator is a mock of DaemonSetCreator interface.
type MockDaemonSetCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonSetCreatorMockRecorder
}

// MockDaemonSetCreatorMockRecorder is the mock recorder for MockDaemonSetCreator.
type MockDaemonSetCreatorMockRecorder struct {
	mock *MockDaemonSetCreator
}

// NewMockDaemonSetCreator creates a new mock instance.
func NewMockDaemonSetCreator(ctrl *gomock.Controller) *MockDaemonSetCreator {
	mock := &MockDaemonSetCreator{ctrl: ctrl}
	mock.recorder = &MockDaemonSetCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaemonSetCreator) EXPECT() *MockDaemonSetCreatorMockRecorder {
	return m.recorder
}

// ModuleDaemonSetsByKernelVersion mocks base method.
func (m *MockDaemonSetCreator) ModuleDaemonSetsByKernelVersion(ctx context.Context, mod v1alpha1.Module) (map[string]*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleDaemonSetsByKernelVersion", ctx, mod)
	ret0, _ := ret[0].(map[string]*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleDaemonSetsByKernelVersion indicates an expected call of ModuleDaemonSetsByKernelVersion.
func (mr *MockDaemonSetCreatorMockRecorder) ModuleDaemonSetsByKernelVersion(ctx, mod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleDaemonSetsByKernelVersion", reflect.TypeOf((*MockDaemonSetCreator)(nil).ModuleDaemonSetsByKernelVersion), ctx, mod)
}

// SetAsDesired mocks base method.
func (m *MockDaemonSetCreator) SetAsDesired(ds *v1.DaemonSet, image string, mod v1alpha1.Module, kernelVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsDesired", ds, image, mod, kernelVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsDesired indicates an expected call of SetAsDesired.
func (mr *MockDaemonSetCreatorMockRecorder) SetAsDesired(ds, image, mod, kernelVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsDesired", reflect.TypeOf((*MockDaemonSetCreator)(nil).SetAsDesired), ds, image, mod, kernelVersion)
}
