name: e2e

on: [pull_request]

env:
  GO_VERSION: 1.18

jobs:
  build-operator-image:
    runs-on: ubuntu-latest

    name: Build the OOTO container image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build the image
        run: docker build -t ooto:local .

      - name: Export the image
        run: docker save -o ooto_local.tar ooto:local

      - name: Upload the image
        uses: actions/upload-artifact@v3
        with:
          name: ci-images
          if-no-files-found: error
          path: ooto_local.tar
          retention-days: 1

  build-drivercontainer-image:
    runs-on: ubuntu-latest

    name: Build the DriverContainer image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'DEBUG: List all kernel modules'
        run: find /lib/modules/$(uname -r) -type f -name '*.ko*'

      - name: Save the kernel version
        run: echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV

      - name: Build the kernel module
        run: make KERNEL_SRC_DIR="/usr/src/linux-headers-${KERNEL_VERSION}"
        working-directory: ci/ooto-kmod

      - name: Build the image
        run: docker build -t ooto-kmod:local --build-arg=KERNEL_VERSION=${KERNEL_VERSION} ci/ooto-kmod

      - name: Export the image
        run: docker save -o ooto-kmod_local.tar ooto-kmod:local

      - name: Upload the image
        uses: actions/upload-artifact@v3
        with:
          name: ci-images
          path: ooto-kmod_local.tar
          if-no-files-found: error
          retention-days: 1

  e2e:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - kustomize-config-default: ci/install-nfd-labeling
            install-nfd: true
          - kustomize-config-default: ci/install-ci
            install-nfd: false

    name: "Prebuilt kernel module (NFD: ${{ matrix.install-nfd }})"

    needs: [build-operator-image, build-drivercontainer-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download and install minikube
        id: install-minikube
        run: |
          wget https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
          sudo dpkg -i ./minikube_latest_amd64.deb
          echo "::set-output name=version::$(minikube version --short)"

      - name: Cache Minikube artifacts
        uses: actions/cache@v3
        with:
          path: ~/.minikube/cache
          key: ${{ runner.os }}-minikube-${{ steps.install-minikube.outputs.version }}

      - name: Start minikube and wait until CoreDNS is available
        run: |
          minikube start --driver=docker
          kubectl wait --for=condition=available deployment coredns -n kube-system

      - name: Install NFD
        run: kubectl apply -k https://github.com/kubernetes-sigs/node-feature-discovery/deployment/overlays/default?ref=v0.10.1
        if: ${{ matrix.install-nfd }}

      - name: Label the node so that it gets the module
        run: kubectl label node minikube wants-oot-module=ooto_ci_a

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Import images into minikube
        run: |
          minikube image load ooto_local.tar
          minikube image load ooto-kmod_local.tar

      - name: Cache binaries needed by Makefile
        id: cache-bin
        uses: actions/cache@v3
        with:
          path: ./bin
          key: ${{ runner.os }}-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        if: steps.cache-bin.outputs.cache-hit != 'true'

      - name: Deploy OOTO
        run: make deploy
        env:
          KUSTOMIZE_CONFIG_DEFAULT: ${{ matrix.kustomize-config-default }}

      - name: Wait until the OOTO Deployment is Available
        run: kubectl wait --for condition=Available deployments.apps -n oot-operator-system oot-operator-controller-manager
        timeout-minutes: 1

      - name: Describe the Deployment and get its YAML if that failed
        run: |
          kubectl describe deployments.apps -n oot-operator-system oot-operator-controller-manager
          kubectl get -o yaml deployments.apps -n oot-operator-system oot-operator-controller-manager
        if: ${{ failure() }}

      - name: Check that the ooto_ci_a module is not loaded on the node
        run: |
          if minikube ssh -- lsmod | grep ooto_ci_a; then
            echo "Unexpected lsmod output - the module should not be loaded"
            exit 1
          fi

      - name: Add an ooto-ci Module that contains a valid mapping
        run: |
          sed -e "s/KVER_CHANGEME/$(uname -r)/g" \
            -e s/NAME_CHANGEME/ooto-ci/ \
            -e s/KMOD_CHANGEME/ooto_ci_a/ \
            ci/module-ooto-ci.template.yaml | tee module-ooto-ci.yaml

          kubectl apply -f module-ooto-ci.yaml

      - name: Check that the module gets loaded on the node
        run: |
          until minikube ssh -- lsmod | grep ooto_ci_a; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Remove the Module
        run: kubectl delete -f module-ooto-ci.yaml

      - name: Check that the module gets unloaded from the node
        run: |
          until ! minikube ssh -- lsmod | grep ooto_ci_a; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Get all resources in the oot-operator-system namespace
        run: kubectl get all -n oot-operator-system
        if: ${{ always() }}

      - name: Get all resources in the default namespace
        run: kubectl get all
        if: ${{ always() }}

      - name: Describe nodes
        run: kubectl describe node
        if: ${{ always() }}

      - name: Describe DaemonSets
        run: kubectl describe daemonset -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Describe Pods
        run: kubectl describe pod -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Collect dmesg
        run: sudo dmesg
        if: ${{ always() }}

      - name: Get all operator logs
        run: kubectl logs deployment.apps/oot-operator-controller-manager -n oot-operator-system
        if: ${{ always() }}

  e2e-two-nodes:
    name: Prebuilt kernel module - two nodes

    runs-on: ubuntu-latest

    needs: [build-operator-image, build-drivercontainer-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download and install minikube
        id: install-minikube
        run: |
          wget https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
          sudo dpkg -i ./minikube_latest_amd64.deb
          echo "::set-output name=version::$(minikube version --short)"

      - name: Cache Minikube artifacts
        uses: actions/cache@v3
        with:
          path: ~/.minikube/cache
          key: ${{ runner.os }}-minikube-${{ steps.install-minikube.outputs.version }}

      - name: Start minikube and wait until CoreDNS is available
        run: |
          minikube start --driver=docker -n 2
          kubectl wait --for=condition=available deployment coredns -n kube-system

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Import images into minikube
        run: |
          minikube image load ooto_local.tar
          minikube image load ooto-kmod_local.tar

      - name: Cache binaries needed by Makefile
        id: cache-bin
        uses: actions/cache@v3
        with:
          path: ./bin
          key: ${{ runner.os }}-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        if: steps.cache-bin.outputs.cache-hit != 'true'

      - name: Deploy OOTO
        run: make deploy
        env:
          KUSTOMIZE_CONFIG_DEFAULT: ci/install-ci

      - name: Wait until the OOTO Deployment is Available
        run: kubectl wait --for condition=Available deployments.apps -n oot-operator-system oot-operator-controller-manager
        timeout-minutes: 1

      - name: Describe the Deployment / pods and get their YAML if that failed
        run: |
          kubectl describe deployments.apps -n oot-operator-system oot-operator-controller-manager
          kubectl get -o yaml deployments.apps -n oot-operator-system oot-operator-controller-manager

          kubectl describe pod -n oot-operator-system
          kubectl get -o yaml pod -n oot-operator-system
        if: ${{ failure() }}

      - name: Create one Module for each node
        run: |
          KERNEL_VERSION="$(uname -r)"

          # Node minikube gets module a
          sed -e s/NAME_CHANGEME/ooto-ci-a/g \
            -e s/KMOD_CHANGEME/ooto_ci_a/g \
            -e "s/KVER_CHANGEME/${KERNEL_VERSION}/g" \
            ci/module-ooto-ci.template.yaml | tee module-ooto-ci-a.yaml

          # Node minikube-m02 gets module b
          sed -e s/NAME_CHANGEME/ooto-ci-b/g \
            -e s/KMOD_CHANGEME/ooto_ci_b/g \
            -e "s/KVER_CHANGEME/${KERNEL_VERSION}/g" \
            ci/module-ooto-ci.template.yaml | tee module-ooto-ci-b.yaml

          kubectl apply -f module-ooto-ci-a.yaml -f module-ooto-ci-b.yaml

      - name: Label the first node to have it receive module a
        run: kubectl label node minikube wants-oot-module=ooto_ci_a

      - name: Check that module a gets loaded on the first node
        run: |
          until minikube ssh -- lsmod | grep ooto_ci_a; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Label the second node to have it receive module b
        run: kubectl label node minikube-m02 wants-oot-module=ooto_ci_b

      - name: Check that module b gets loaded on the second node
        run: |
          until minikube ssh -n minikube-m02 -- lsmod | grep ooto_ci_b; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Remove the wants-oot-module label on the second node
        run: kubectl label node minikube-m02 wants-oot-module-

      - name: Check that module b gets unloaded from the second node
        run: |
          until ! minikube ssh -n minikube-m02 -- lsmod | grep ooto_ci_b; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Verify that the DaemonSet gets garbage collected
        run: |
          # Cannot use kubectl wait because it will fail if there is no initial match
          until [ $(kubectl get daemonsets.apps -l oot.node.kubernetes.io/module.name=ooto-ci-b -o go-template='{{ len .items }}') -eq 0 ]; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Get all resources in the oot-operator-system namespace
        run: kubectl get all -n oot-operator-system
        if: ${{ always() }}

      - name: Get all resources in the default namespace
        run: kubectl get all
        if: ${{ always() }}

      - name: Describe nodes
        run: kubectl describe node
        if: ${{ always() }}

      - name: Describe DaemonSets
        run: kubectl describe daemonset -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Describe Pods
        run: kubectl describe pod -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Collect dmesg
        run: sudo dmesg
        if: ${{ always() }}

      - name: Get all operator logs
        run: kubectl logs deployment.apps/oot-operator-controller-manager -n oot-operator-system
        if: ${{ always() }}

  in-cluster-build:
    runs-on: ubuntu-latest

    name: In-cluster build

    needs: [build-operator-image, build-drivercontainer-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download and install minikube
        id: install-minikube
        run: |
          wget https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
          sudo dpkg -i ./minikube_latest_amd64.deb
          echo "::set-output name=version::$(minikube version --short)"

      - name: Cache Minikube artifacts
        uses: actions/cache@v3
        with:
          path: ~/.minikube/cache
          key: ${{ runner.os }}-minikube-${{ steps.install-minikube.outputs.version }}

      - name: Start minikube and wait until CoreDNS is available
        run: |
          minikube start --driver=docker --addons registry,registry-aliases
          kubectl wait --for=condition=available deployment coredns -n kube-system

          kubectl apply -f ci/registry-nodeport.yaml

      - name: Install skopeo
        run: |
          sudo apt -y update
          sudo apt -y install skopeo

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Import DriverContainer base into the internal-registry
        run: |
          MINIKUBE_REGISTRY_EXT="$(minikube service registry-nodeport -n kube-system --format '{{.IP}}:{{.Port}}' --url)"
          skopeo copy --dest-tls-verify=false docker-archive:ooto-kmod_local.tar docker://${MINIKUBE_REGISTRY_EXT}/ooto-base:local

      - name: Import the OOTO image into minikube
        run: minikube image load ooto_local.tar

      - name: Cache binaries needed by Makefile
        id: cache-bin
        uses: actions/cache@v3
        with:
          path: ./bin
          key: ${{ runner.os }}-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        if: steps.cache-bin.outputs.cache-hit != 'true'

      - name: Deploy OOTO
        run: make deploy
        env:
          KUSTOMIZE_CONFIG_DEFAULT: ci/install-ci

      - name: Wait until the OOTO Deployment is Available
        run: kubectl wait --for condition=Available deployments.apps -n oot-operator-system oot-operator-controller-manager
        timeout-minutes: 1

      - name: Describe the Deployment / pods and get their YAML if that failed
        run: |
          kubectl describe deployments.apps -n oot-operator-system oot-operator-controller-manager
          kubectl get -o yaml deployments.apps -n oot-operator-system oot-operator-controller-manager

          kubectl describe pod -n oot-operator-system
          kubectl get -o yaml pod -n oot-operator-system
        if: ${{ failure() }}

      - name: Create a build secret
        run: kubectl create secret generic build-secret --from-literal=ci-build-secret=super-secret-value

      - name: Add an ooto-ci Module that contains a valid mapping
        run: |
          sed -e "s/KVER_CHANGEME/$(uname -r)/g" ci/module-ooto-ci-build.template.yaml | tee module-ooto-ci.yaml

          kubectl apply -f module-ooto-ci.yaml

      - name: Wait for the job to be created
        run: |
          until kubectl get job -l oot.node.kubernetes.io/module.name | grep ooto; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Wait for Job completion
        run: kubectl wait --for condition=complete job -l oot.node.kubernetes.io/module.name --timeout=-1s
        timeout-minutes: 2

      - name: Collect job logs
        run: |
          JOB_NAME=$(kubectl get jobs.batch -l oot.node.kubernetes.io/module.name --template='{{ (index .items 0).metadata.name }}')
          kubectl logs jobs.batch/${JOB_NAME}
        if: ${{ always() }}

      - name: Check that the module gets loaded on the node
        run: |
          until minikube ssh -- lsmod | grep ooto_ci_a; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Check that the DriverContainer prints the secret's value to the standard output
        run: |
          until kubectl logs -l oot.node.kubernetes.io/module.name | grep super-secret-value; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Remove the Module
        run: kubectl delete -f module-ooto-ci.yaml

      - name: Check that the module gets unloaded from the node
        run: |
          until ! minikube ssh -- lsmod | grep ooto_ci_a; do
            sleep 3
          done
        timeout-minutes: 1

      - name: Get all resources in the oot-operator-system namespace
        run: kubectl get all -n oot-operator-system
        if: ${{ always() }}

      - name: Get all resources in the default namespace
        run: kubectl get all
        if: ${{ always() }}

      - name: Describe nodes
        run: kubectl describe node
        if: ${{ always() }}

      - name: Describe Jobs
        run: kubectl describe job
        if: ${{ always() }}

      - name: Describe DaemonSets
        run: kubectl describe daemonset -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Describe Pods
        run: kubectl describe pod -l oot.node.kubernetes.io/module.name
        if: ${{ always() }}

      - name: Collect dmesg
        run: sudo dmesg
        if: ${{ always() }}

      - name: Get all operator logs
        run: kubectl logs deployment.apps/oot-operator-controller-manager -n oot-operator-system
        if: ${{ always() }}